name: LeetCode Sync

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Test PAT Token Repository Access
        run: |
          echo "üîç Testing PAT_TOKEN repository permissions..."
          
          # Check if we can access the repository
          echo "Testing repository read access..."
          repo_response=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                         "https://api.github.com/repos/${{ github.repository }}")
          
          echo "Repository info:"
          echo "$repo_response" | jq -r '.name, .full_name, .private'
          
          # Check repository permissions specifically
          echo "Checking repository permissions..."
          echo "$repo_response" | jq '.permissions'
          
          # Test if we can write to repository (create/update file)
          echo "Testing write access by creating a test file..."
          test_content=$(echo "Test file created at $(date)" | base64 -w 0)
          
          create_response=$(curl -s -w "%{http_code}" \
            -X PUT \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/contents/.github/test-write-access.txt" \
            -d "{
              \"message\": \"Test write access\",
              \"content\": \"$test_content\"
            }")
          
          create_code=${create_response: -3}
          echo "Create file response code: $create_code"
          
          if [ "$create_code" == "201" ]; then
            echo "‚úÖ Write access confirmed - can create files"
            
            # Clean up test file
            sha=$(echo "${create_response%???}" | jq -r '.content.sha')
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/contents/.github/test-write-access.txt" \
              -d "{
                \"message\": \"Remove test file\",
                \"sha\": \"$sha\"
              }"
            echo "Test file cleaned up"
          else
            echo "‚ùå Write access failed"
            echo "Response: ${create_response%???}"
          fi

      - name: Debug - Check Token Scopes
        run: |
          echo "üîç Checking OAuth scopes..."
          scope_response=$(curl -s -I -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                          "https://api.github.com/user")
          
          echo "OAuth scopes granted to token:"
          echo "$scope_response" | grep -i "x-oauth-scopes" | cut -d: -f2 | tr ',' '\n' | sed 's/^ */- /'
          
          echo "OAuth scopes accepted for this endpoint:"
          echo "$scope_response" | grep -i "x-accepted-oauth-scopes" | cut -d: -f2 | tr ',' '\n' | sed 's/^ */- /'

      - name: Debug - Compare with GITHUB_TOKEN
        run: |
          echo "üîç Comparing with built-in GITHUB_TOKEN..."
          
          github_repo_response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                "https://api.github.com/repos/${{ github.repository }}")
          
          echo "GITHUB_TOKEN permissions:"
          echo "$github_repo_response" | jq '.permissions'

      - name: Sync LeetCode Solutions
        uses: joshcai/leetcode-sync@v1.7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          leetcode-csrf-token: ${{ secrets.LEETCODE_CSRF_TOKEN }}
          leetcode-session: ${{ secrets.LEETCODE_SESSION }}

      - name: Debug - Post-failure Analysis
        if: failure()
        run: |
          echo "üîç Sync failed - analyzing possible causes..."
          echo ""
          echo "Common causes for 'Resource not accessible by personal access token':"
          echo "1. Token missing 'repo' or 'public_repo' scope"
          echo "2. Token missing 'workflow' scope (if modifying .github/ files)"
          echo "3. Repository is private but token only has public_repo scope"
          echo "4. Organization restrictions on personal access tokens"
          echo "5. Token expired or was regenerated"
          echo ""
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
